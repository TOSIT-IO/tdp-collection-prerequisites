# Copyright 2022 TOSIT.IO
# SPDX-License-Identifier: Apache-2.0

---
- name: Delete slapd.d
  ansible.builtin.file:
    path: /etc/openldap/slapd.d
    state: absent

- name: Check Kerberos version
  ansible.builtin.command: klist -V
  register: reg_klist
  changed_when: no

- name: Copy kerberos schema to ldap folder
  ansible.builtin.copy:
    src: "/usr/share/doc/krb5-server-ldap{{ kerberos_schema_version }}/kerberos.schema"
    dest: /etc/openldap/schema
    owner: root
    group: root
    mode: "0644"
    remote_src: yes
  vars:
    kerberos_schema_version: "{{ ( (ansible_distribution_major_version | int) < 8) | ternary('-' + reg_klist.stdout.split(' ')[-1],'') }}"

- name: Copy TLS key pair to ldap folder
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: root
    mode: "{{ item.mode }}"
    remote_src: yes
  loop:
    - src: "{{ certificates_public_key }}"
      dest: "{{ ldap_public_key }}"
      owner: root
      mode: "0644"
    - src: "{{ certificates_private_key }}"
      dest: "{{ ldap_private_key }}"
      owner: ldap
      mode: "0440"
  notify: restart slapd

- name: Configure slapd.conf
  template:
    src: slapd.conf.j2
    dest: /etc/openldap/slapd.conf
    owner: root
    group: root
    mode: "0644"
  notify: restart slapd

- name: Configure /etc/sysconfig/slapd
  template:
    src: sysconfig-slapd.j2
    dest: /etc/sysconfig/slapd
    owner: root
    group: root
    mode: "0644"
  notify: restart slapd

- name: Start and enable slapd
  ansible.builtin.service:
    name: slapd
    state: started
    enabled: yes

- name: Create LDAP tree
  ansible.builtin.shell: |
    ldapadd -x -D {{ ldap_rootdn }} -w {{ ldap_rootpw }} << EOF
    {{ item }}
    EOF
  register: reg_ldapadd
  failed_when:
    - reg_ldapadd is failed
    - reg_ldapadd.rc != 68
  changed_when: reg_ldapadd.rc != 68
  loop:
    - "{{ ldap_base_tree_ldif }}"
    - "{{ ldap_users_tree_ldif }}"
    - "{{ ldap_groups_tree_ldif }}"

- name: Create LDAP groups
  ansible.builtin.shell: |
    ldapadd -x -D {{ ldap_rootdn }} -w {{ ldap_rootpw }} << EOF
    {{ ldap_group_ldif }}
    EOF
  register: reg_ldapadd
  failed_when:
    - reg_ldapadd is failed
    - reg_ldapadd.rc != 68
  changed_when: reg_ldapadd.rc != 68
  loop: "{{ ldap_groups }}"
  loop_control:
    label: "{'group': '{{ item.group }}', 'gid': '{{ item.gid }}'}"
  vars:
    group: "{{ item.group }}"
    gid: "{{ item.gid }}"

- name: Create LDAP users
  ansible.builtin.shell: |
    ldapadd -x -D {{ ldap_rootdn }} -w {{ ldap_rootpw }} << EOF
    {{ ldap_user_ldif }}
    EOF
  register: reg_ldapadd
  failed_when:
    - reg_ldapadd is failed
    - reg_ldapadd.rc != 68
  changed_when: reg_ldapadd.rc != 68
  loop: "{{ ldap_users }}"
  loop_control:
    label: "{'user': '{{ item.user }}', 'uid': '{{ item.uid }}', 'gid': '{{ item.gid }}'}"
  vars:
    user: "{{ item.user }}"
    password: "{{ item.password }}"
    uid: "{{ item.uid }}"
    gid: "{{ item.gid }}"
